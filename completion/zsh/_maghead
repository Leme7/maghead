# bin/maghead zsh completion script generated by CLIFramework
# Web: http://github.com/c9s/php-CLIFramework
# THIS IS AN AUTO-GENERATED FILE, PLEASE DON'T MODIFY THIS FILE DIRECTLY.
___bin_magheadmeta () {
  local curcontext=$curcontext state line ret=1
  typeset -A opt_args
  typeset -A val_args
  declare -a lines
  declare -a args
  local ret=1
  local desc=$1
  local cmdsig=$2
  local valtype=$3
  local pos=$4
  local completion=$5
  output=$(bin/maghead meta --zsh $cmdsig $valtype $pos $completion)
  lines=("${(@f)output}")
  output_type=${lines[1]}
  if [[ $lines[1] == "#groups" ]] ; then
      eval $output
      for tag in ${(k)groups} ; do
          complete_values=(${(z)${groups[$tag]}})
          label=${labels[$tag]}
          if [[ -z $label ]] ; then
              label=$tag
          fi
          _describe -t $tag $label complete_values && ret=0
      done
  elif [[ $lines[1] == "#values" ]] ; then
      args=(${lines:1})
     _values "$desc" ${=args} && ret=0
  elif [[ $lines[1] == "#descriptions" ]] ; then
      args=(${lines:1})
      _describe "$desc" args && ret=0
  else
     _values "$desc" ${=lines} && ret=0
  fi
  return ret
}
_bin_maghead() {
local curcontext=$curcontext state line
typeset -A opt_args
local ret=1
  _arguments -C \
    '(-v --verbose)'{-v,--verbose}'[Print verbose message.]' \
    '(-d --debug)'{-d,--debug}'[Print debug message.]' \
    '(-q --quiet)'{-q,--quiet}'[Be quiet.]' \
    '(-h --help)'{-h,--help}'[Show help.]' \
    '--version[Show version.]' \
    '(-p --profile)'{-p,--profile}'[Display timing and memory usage information.]' \
    '--log-path[The path of a log file.]' \
    '--no-interact[Do not ask any interactive question.]' \
    ': :->cmds' \
    '*:: :->option-or-argument' \
     && return
  case $state in
    (cmds)
  local commands; commands=(
    help:'Show help message of a command'
    zsh:'This function generate a zsh-completion script automatically'
    bash:'This command generate a bash completion script automatically'
    meta:'Set, get or list meta.'
    compile:'compile current source into Phar format library file.'
    archive:'Build executable phar file from composer.json'
    github:build-topics:'Build topic classes from the wiki of a GitHub Project.'
    init:'initialize your lazyrecord structures.'
    use:'Build and use configuration file.'
    init-conf:'awesome brief for your app.'
    schema:'schema command.'
    basedata:'insert basedata into datasource.'
    sql:'build sql and insert into database.'
    diff:'Compare the defined schemas with the tables in database.'
    migrate:'Database migration commands'
    version:'Show database version'
    db:'database related commands.'
    shard:'shard commands'
    table:'show table status.'
    index:'show indexes.'
  )
  _describe -t commands 'command' commands && ret=0
    ;;
    (option-or-argument)
      curcontext=${curcontext%:*}-$line[1]:
      case $line[1] in
        (help)
            _arguments -w -S -s \
              '--dev[Show development commands]' \
               && ret=0
        
        ;;
        (zsh)
            _arguments -w -S -s \
              '--bind=[bind complete to command]' \
              '--program=[programe name]' \
               && ret=0
        
        ;;
        (bash)
            _arguments -w -S -s \
              '--bind=[bind complete to command]' \
              '--program=[programe name]' \
               && ret=0
        
        ;;
        (meta)
            _arguments -w -S -s \
              '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" meta opt data-source valid-values}' \
               && ret=0
        
        ;;
        (compile)
            _arguments -w -S -s \
              '--classloader[embed classloader source file]' \
              '--bootstrap[bootstrap or executable source file]' \
              '--executable[is a executable script ?]' \
              '--lib=[library path]' \
              '--include=[include path]' \
              '--exclude=[exclude pattern]' \
              '--output=[output]' \
              '(-c --compress)'{-c,--compress}'[phar file compress type\: gz, bz2]' \
              '--no-compress[do not compress phar file.]' \
               && ret=0
        
        ;;
        (archive)
            _arguments -w -S -s \
              '(-d --working-dir)'{-d,--working-dir=}'[If specified, use the given directory as working directory.]:dir:_directories' \
              '(-c --composer)'{-c,--composer=}'[The composer.json file. If --working-dir is ignored, dirname of the composer.json will be used.]:file:_files' \
              '--vendor=[Vendor directory name]' \
              '--bootstrap[bootstrap or executable php file]:file:_files' \
              '--executable[make the phar file executable]:boolean' \
              '(-c --compress)'{-c,--compress}'[compress type\: gz, bz2]::("gz" "bz2")' \
              '--no-compress[do not compress phar file.]' \
              '--add=[add a path respectively]' \
              '--exclude=[exclude pattern]' \
              '--no-classloader[do not embed a built-in classloader in the generated phar file.]' \
              '--app-bootstrap[Include CLIFramework bootstrap script.]' \
              ':phar-file' \
               && ret=0
        
        ;;
        (github:build-topics)
            _arguments -w -S -s \
              '--ns=[Class namespace]' \
              '--dir=[Output directory]' \
              '--update[Update wiki repository]' \
              ':user' \
              ':repo' \
               && ret=0
        
        ;;
        (init)
        
        ;;
        (use)
            _arguments -w -S -s \
              '(-f --force)'{-f,--force}'[force building config file.]' \
              '(-s --search)'{-s,--search}'[search default config file automatically]' \
              ':file:_files -g "*.yml"' \
               && ret=0
        
        ;;
        (init-conf)
            _arguments -w -S -s \
              '--driver=[pdo driver type]' \
              '--dsn=[dsn]' \
              '--database=[database name]' \
              '--username=[username]' \
              '--password=[password]' \
              '--config=[config file]' \
               && ret=0
        
        ;;
        (schema)
            _arguments -C \
              '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" schema opt data-source valid-values}' \
              ': :->cmds' \
              '*:: :->option-or-argument' \
               && return
            case $state in
              (cmds)
            local commands; commands=(
              build:'build schema files.'
              list:'list schema files.'
              clean:'clean up schema files.'
              status:'show schema status.'
            )
            _describe -t commands 'command' commands && ret=0
              ;;
              (option-or-argument)
                curcontext=${curcontext%:*}-$line[1]:
                case $line[1] in
                  (build)
                        _arguments -w -S -s \
                          '(-f --force)'{-f,--force}'[force generate all schema files.]' \
                          '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" schema.build opt data-source valid-values}' \
                          ':file:_files' \
                           && ret=0
                  
                  ;;
                  (list)
                        _arguments -w -S -s \
                          '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" schema.list opt data-source valid-values}' \
                           && ret=0
                  
                  ;;
                  (clean)
                        _arguments -w -S -s \
                          '(-f --force)'{-f,--force}'[force generate all schema files.]' \
                          '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" schema.clean opt data-source valid-values}' \
                           && ret=0
                  
                  ;;
                  (status)
                        _arguments -w -S -s \
                          '(-f --force)'{-f,--force}'[force generate all schema files.]' \
                          '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" schema.status opt data-source valid-values}' \
                           && ret=0
                  
                  ;;
                esac
                ;;
              esac
        
        ;;
        (basedata)
            _arguments -w -S -s \
              '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" basedata opt data-source valid-values}' \
               && ret=0
        
        ;;
        (sql)
            _arguments -w -S -s \
              '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" sql opt data-source valid-values}' \
              '(-r --rebuild)'{-r,--rebuild}'[rebuild SQL schema.]' \
              '(-c --clean)'{-c,--clean}'[clean up SQL schema.]' \
              '(-o --output)'{-o,--output=}'[write schema sql to file]' \
              '(-b --basedata)'{-b,--basedata}'[insert basedata]' \
               && ret=0
        
        ;;
        (diff)
            _arguments -w -S -s \
              '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" diff opt data-source valid-values}' \
               && ret=0
        
        ;;
        (migrate)
            _arguments -C \
              '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" migrate opt data-source valid-values}' \
              ': :->cmds' \
              '*:: :->option-or-argument' \
               && return
            case $state in
              (cmds)
            local commands; commands=(
              upgrade:'Run upgrade migration scripts.'
              downgrade:'Run downgrade migration scripts.'
              new:'awesome brief for your app.'
              automatic:'Run upgrade automatically.'
              status:'Show current migration status.'
              diff:'awesome brief for your app.'
            )
            _describe -t commands 'command' commands && ret=0
              ;;
              (option-or-argument)
                curcontext=${curcontext%:*}-$line[1]:
                case $line[1] in
                  (upgrade)
                        _arguments -w -S -s \
                          '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" migrate.upgrade opt data-source valid-values}' \
                          '--script-dir[Migration script directory. (default\: db/migrations)]' \
                          '(-b --backup)'{-b,--backup}'[Backup database before running migration script.]' \
                           && ret=0
                  
                  ;;
                  (downgrade)
                        _arguments -w -S -s \
                          '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" migrate.downgrade opt data-source valid-values}' \
                          '--script-dir[Migration script directory. (default\: db/migrations)]' \
                          '(-b --backup)'{-b,--backup}'[Backup database before running migration script.]' \
                           && ret=0
                  
                  ;;
                  (new)
                        _arguments -w -S -s \
                          '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" migrate.new opt data-source valid-values}' \
                          '--script-dir[Migration script directory. (default\: db/migrations)]' \
                          '(-b --backup)'{-b,--backup}'[Backup database before running migration script.]' \
                          ':taskName' \
                           && ret=0
                  
                  ;;
                  (automatic)
                        _arguments -w -S -s \
                          '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" migrate.automatic opt data-source valid-values}' \
                          '--script-dir[Migration script directory. (default\: db/migrations)]' \
                          '(-b --backup)'{-b,--backup}'[Backup database before running migration script.]' \
                          '--no-drop-column[Do not drop column in automatic migration process.]' \
                          '--separate-alter[Do not combine multiple alter table subquery into one alter table query.]' \
                           && ret=0
                  
                  ;;
                  (status)
                        _arguments -w -S -s \
                          '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" migrate.status opt data-source valid-values}' \
                          '--script-dir[Migration script directory. (default\: db/migrations)]' \
                          '(-b --backup)'{-b,--backup}'[Backup database before running migration script.]' \
                           && ret=0
                  
                  ;;
                  (diff)
                        _arguments -w -S -s \
                          '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" migrate.diff opt data-source valid-values}' \
                          '--script-dir[Migration script directory. (default\: db/migrations)]' \
                          '(-b --backup)'{-b,--backup}'[Backup database before running migration script.]' \
                          ':taskName' \
                           && ret=0
                  
                  ;;
                esac
                ;;
              esac
        
        ;;
        (version)
            _arguments -w -S -s \
              '(-D --data-source)'{-D,--data-source=}'[specify data source id]' \
               && ret=0
        
        ;;
        (db)
            _arguments -C \
              '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" db opt data-source valid-values}' \
              ': :->cmds' \
              '*:: :->option-or-argument' \
               && return
            case $state in
              (cmds)
            local commands; commands=(
              add:'Add a database to the config file.'
              remove:'Remove node from config file.'
              create:'create database bases on the current config.'
              recreate:'re-create database bases on the current config.'
              drop:'create database bases on the current config.'
              list:'list databases'
            )
            _describe -t commands 'command' commands && ret=0
              ;;
              (option-or-argument)
                curcontext=${curcontext%:*}-$line[1]:
                case $line[1] in
                  (add)
                        _arguments -w -S -s \
                          '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" db.add opt data-source valid-values}' \
                          '--create[invoke create database query]' \
                          '--host=[host for database]' \
                          '--port=[port for database]' \
                          '--user=[user id for database connection]' \
                          '--password=[password for database connection]' \
                          ':node-id' \
                          ':dsn' \
                           && ret=0
                  
                  ;;
                  (remove)
                        _arguments -w -S -s \
                          '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" db.remove opt data-source valid-values}' \
                          '--drop[perform drop database query before removing the database.]' \
                          ':node-id' \
                           && ret=0
                  
                  ;;
                  (create)
                        _arguments -w -S -s \
                          '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" db.create opt data-source valid-values}' \
                          ':nodeId' \
                           && ret=0
                  
                  ;;
                  (recreate)
                        _arguments -w -S -s \
                          '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" db.recreate opt data-source valid-values}' \
                          ':nodeId' \
                           && ret=0
                  
                  ;;
                  (drop)
                        _arguments -w -S -s \
                          '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" db.drop opt data-source valid-values}' \
                          ':nodeId' \
                           && ret=0
                  
                  ;;
                  (list)
                        _arguments -w -S -s \
                          '(-v --verbose)'{-v,--verbose}'[Display verbose information]' \
                           && ret=0
                  
                  ;;
                esac
                ;;
              esac
        
        ;;
        (shard)
            _arguments -C \
              ': :->cmds' \
              '*:: :->option-or-argument' \
               && return
            case $state in
              (cmds)
            local commands; commands=(
              mapping:'shard mapping commands'
            )
            _describe -t commands 'command' commands && ret=0
              ;;
              (option-or-argument)
                curcontext=${curcontext%:*}-$line[1]:
                case $line[1] in
                  (mapping)
                        _arguments -C \
                          '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" shard.mapping opt data-source valid-values}' \
                          ': :->cmds' \
                          '*:: :->option-or-argument' \
                           && return
                        case $state in
                          (cmds)
                        local commands; commands=(
                          add:'create the shard mapping config'
                          remove:'remove the shard mapping config'
                        )
                        _describe -t commands 'command' commands && ret=0
                          ;;
                          (option-or-argument)
                            curcontext=${curcontext%:*}-$line[1]:
                            case $line[1] in
                              (add)
                                      _arguments -w -S -s \
                                        '--hash[hash based shard key]' \
                                        '(-k --key)'{-k,--key=}'[shard key]' \
                                        '--shards=[shard ids]' \
                                        '--chunks=[the number of chunks]' \
                                        ':mapping-id' \
                                         && ret=0
                              
                              ;;
                              (remove)
                                      _arguments -w -S -s \
                                        '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" shard.mapping.remove opt data-source valid-values}' \
                                        ':mapping-id' \
                                         && ret=0
                              
                              ;;
                            esac
                            ;;
                          esac
                  
                  ;;
                esac
                ;;
              esac
        
        ;;
        (table)
            _arguments -w -S -s \
              '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" table opt data-source valid-values}' \
              '(-v --verbose)'{-v,--verbose}'[Display verbose information]' \
               && ret=0
        
        ;;
        (index)
            _arguments -w -S -s \
              '(-D --data-source)'{-D,--data-source=}'[specify data source id]::{___bin_magheadmeta "" index opt data-source valid-values}' \
               && ret=0
        
        ;;
      esac
      ;;
    esac

return ret
}
compdef _bin_maghead maghead
